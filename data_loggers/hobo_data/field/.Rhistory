# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailylowpermonth <- temp.dailylow %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, treatment) %>% dplyr::summarize(mean = mean(low))
mean.temp.dailylowpermonth
# calculate mean daily low (mean) per month for each plot separately
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailylowpermonth.plot <- temp.dailylow %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, plot, treatment) %>% dplyr::summarize(mean = mean(low))
mean.temp.dailylowpermonth.plot
# t test
pwc.temp.dailylowpermonth.plot <- mean.temp.dailylowpermonth.plot %>% group_by(plot) %>%
rstatix::t_test(mean ~ treatment, paired = T, detailed = T)
pwc.temp.dailylowpermonth.plot %>% adjust_pvalue(method = "BH") -> pwc.temp.dailylowpermonth.plot
#### anova ####
# one way anova with repeated measures (plot pairs/triplets)
anova.mean.temp.dailylowpermonth.plot <-  mean.temp.dailylowpermonth.plot %>% ungroup() %>%
rstatix::anova_test(mean ~ treatment, wid = plot)
rstatix::get_anova_table(anova.mean.temp.dailylowpermonth.plot)
#### including site reference ####
#### anova ####
# next want to do anova of just dates that have all site reference
twentythree.all.june %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, treatment) %>%
dplyr::summarize(low = min(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailylow.all.june
head(temp.dailylow.all.june)
anova.temp.dailylow.all.june <-  temp.dailylow.all.june %>% ungroup() %>%
rstatix::anova_test(low ~ treatment, wid = date)
rstatix::get_anova_table(anova.mean.temp.dailylowpermonth.plot)
#### LIGHT ####
#### high ####
#### three pairs ####
# pull out the high TEMP from each day, for each treatment
alldata %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(high = max(Intensity.Lux), n = n(), sd.Value = sd(Intensity.Lux)) -> light.dailyhigh
head(light.dailyhigh)
# calculate mean daily high per month
light.dailyhigh %>%
mutate(month = month(date)) %>%
group_by(month, plot, treatment) %>%
dplyr::summarize(meandailyhigh = mean(high), n = n(), sd.dailyhigh = sd(high)) -> light.dailyhighpermonth.mean
head(light.dailyhighpermonth.mean)
#
# calculate mean daily high (mean) per month for all 3 plots
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.light.dailyhighpermonth <- light.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, treatment) %>% dplyr::summarize(mean = mean(high))
mean.light.dailyhighpermonth
# calculate mean daily high (mean) per month for each plot separately
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.light.dailyhighpermonth.plot <- light.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, plot, treatment) %>% dplyr::summarize(mean = mean(high))
mean.light.dailyhighpermonth.plot
#### anova ####
# one way anova with repeated measures (plot pairs/triplets)
anova.mean.light.dailyhighpermonth.plot <-  mean.light.dailyhighpermonth.plot %>% ungroup() %>%
rstatix::anova_test(mean ~ treatment, wid = plot)
rstatix::get_anova_table(anova.mean.light.dailyhighpermonth.plot)
#### including site reference ####
# next want to do anova of just dates that have all site reference
twentythree.all.june %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, treatment) %>%
dplyr::summarize(high = max(Intensity.Lux), n = n(), sd.Value = sd(Intensity.Lux)) -> light.dailyhigh.all.june
head(light.dailyhigh.all.june)
#### anova ####
anova.light.dailyhigh.all.june <-  light.dailyhigh.all.june %>% ungroup() %>%
rstatix::anova_test(high ~ treatment, wid = date)
rstatix::get_anova_table(anova.light.dailyhigh.all.june)
# ANOVA Table (type II tests)
# ANOVA Table (type II tests)
#
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
anova.light.dailyhigh.all.june
anova.light.dailyhigh.all.june
rstatix::get_anova_table(anova.light.dailyhigh.all.june)
light.dailyhigh.all.june
light.dailyhigh.all.june %>% group_by(treatment) %>% summarise(mean_high = mean(high))
light.dailyhigh.all.june %>% group_by(treatment) %>% dplyr::summarise(mean_high = mean(high))
View(twentythree.all.june)
View(twentythree.all.june)
source('~/.active-rstudio-document')
### a: UV filtered ###
# load files
twentyone.a.febjune <- read.csv("Plot_21-A,_OP-3_febjune2019.csv")
twentyone.a.june <- read.csv("Plot_21-A,_OP-3_june2019.csv")
# bind the files together since dates are not overlapping
twentyone.a.fjj <- rbind(twentyone.a.febjune, twentyone.a.june)
# make new 'plot' column for paired testing
twentyone.a.fjj$plot <- rep("twentyone")
### b: UV transmitted ###
# load files
twentyone.b.febjune <- read.csv("Plot_21-B,_SUVT_febjune2019.csv")
### a: UV filtered ###
# load files
twentyone.a.febjune <- read.csv("Plot_21-A,_OP-3_febjune2019.csv")
twentyone.a.june <- read.csv("Plot_21-A,_OP-3_june2019.csv")
# bind the files together since dates are not overlapping
twentyone.a.fjj <- rbind(twentyone.a.febjune, twentyone.a.june)
# make new 'plot' column for paired testing
twentyone.a.fjj$plot <- rep("twentyone")
### b: UV transmitted ###
# load files
twentyone.b.febjune <- read.csv("Plot_21-B,_SUVT_febjune2019.csv")
twentyone.b.june <- read.csv("Plot_21-B,_SUVT_june2019.csv")
# bind the files together since dates are not overlapping
twentyone.b.fjj <- rbind(twentyone.b.febjune, twentyone.b.june)
# make new 'plot' column for paired testing
twentyone.b.fjj$plot <- rep("twentyone")
### a: UV filtered ###
# load files
twentytwo.a.febjune <- read.csv("Plot_22-A,_OP-3_febjune2019.csv")
# make new 'plot' column for paired testing
twentytwo.a.febjune$plot <- rep("twentytwo")
### b: UV transmitted ###
# load files
twentytwo.b.febjune <- read.csv("Plot_22-B,_SUVT_febjune2019.csv")
# make new 'plot' column for paired testing
twentytwo.b.febjune$plot <- rep("twentytwo")
# fix column name to match the others
twentytwo.b.febjune %>% dplyr::rename(Intensity.Lux = Intensity.Lux.) -> twentytwo.b.febjune
### a: UV filtered ###
# load files
twentythree.a.febjune <- read.csv("Plot_23-A,_OP-3_febjune2019.csv")
twentythree.a.june <- read.csv("Plot_23-A,_OP-3_june2019.csv")
# fix names to all match
twentythree.a.june %>% dplyr::rename(Date.Time = Date.Time.GMT.08.00) -> twentythree.a.june
# bind the files together since dates are not overlapping
twentythree.a.fjj <- rbind(twentythree.a.febjune, twentythree.a.june)
# make new 'plot' column for paired testing
twentythree.a.fjj$plot <- rep("twentythree")
### b: UV transmitted ###
# load files
twentythree.b.febjune <- read.csv("Plot_23-B,_SUVT_febjune2019.csv")
twentythree.b.june <- read.csv("Plot_23-B,_SUVT_june2019.csv")
# fix names to all match
twentythree.b.june %>% dplyr::rename(Date.Time = Date.Time..GMT.08.00) -> twentythree.b.june
twentythree.b.febjune %>% dplyr::rename(Date.Time = Date.Time..GMT.08.00) -> twentythree.b.febjune
# bind the files together since dates are not overlapping
twentythree.b.fjj <- rbind(twentythree.b.febjune, twentythree.b.june)
# make new 'plot' column for paired testing
twentythree.b.fjj$plot <- rep("twentythree")
# fix names of other columns for rbind
twentythree.b.fjj %>% dplyr::rename(Temp..C = Temp...C, Intensity.Lux = Intensity..Lux) -> twentythree.b.fjj
### combine each single treatment type from all three plots ###
uv.filtered <- rbind(twentyone.a.fjj, twentytwo.a.febjune, twentythree.a.fjj)
# make new 'treatment' column
uv.filtered$treatment <- rep("UV.filtered")
uv.transmitted <- rbind(twentyone.b.fjj, twentytwo.b.febjune, twentythree.b.fjj)
# make new 'treatment' column
uv.transmitted$treatment <- rep("UV.transmitted")
# combine all three treatments into one data frame
alldata <- rbind(uv.filtered, uv.transmitted)
alldata <- na.omit(alldata)
# want daily average high and low... need to be able to group by day
# fix format
alldata$Date.Time <- as.character(alldata$Date.Time)
alldata$Date.Time <- as.POSIXct(alldata$Date.Time, format="%Y-%m-%d %H:%M:%S")
alldata <- na.omit(alldata)
#### TEMP ####
#### high ####
#### three pairs ####
# pull out the high TEMP from each day, for each treatment
alldata %>%
mutate(hour = lubridate::hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(high = max(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailyhigh
head(temp.dailyhigh)
# calculate mean daily high per month
temp.dailyhigh %>%
mutate(month = month(date)) %>%
group_by(month, plot, treatment) %>%
dplyr::summarize(meandailyhigh = mean(high), n = n(), sd.dailyhigh = sd(high)) -> temp.dailyhighpermonth.mean
head(temp.dailyhighpermonth.mean)
#
# # calculate mean daily high (mean) per month for all 3 plots
# # data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailyhighpermonth <- temp.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, treatment) %>% dplyr::summarize(mean = mean(high))
mean.temp.dailyhighpermonth
# calculate mean daily high (mean) per month for each plot separately
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailyhighpermonth.plot <- temp.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, plot, treatment) %>% dplyr::summarize(mean = mean(high))
mean.temp.dailyhighpermonth.plot
#### anova ####
# one way anova with repeated measures (plot pairs/triplets)
anova.mean.temp.dailyhighpermonth.plot <-  mean.temp.dailyhighpermonth.plot %>% ungroup() %>%
rstatix::anova_test(mean ~ treatment, wid = plot)
rstatix::get_anova_table(anova.mean.temp.dailyhighpermonth.plot)
#### including site reference ####
# next want to do anova of just dates that have all site reference
twentythree.all.june %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, treatment) %>%
dplyr::summarize(high = max(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailyhigh.all.june
#### low ####
#### three pairs ####
# pull out the low TEMP from each day, for each treatment
alldata %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(low = min(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailylow
head(temp.dailylow)
# calculate mean daily low per month
temp.dailylow %>%
mutate(month = month(date)) %>%
group_by(month, plot, treatment) %>%
dplyr::summarize(meandailylow = mean(low), n = n(), sd.dailylow = sd(low)) -> temp.dailylowpermonth.mean
head(temp.dailylowpermonth.mean)
#
# calculate mean daily low (mean) per month for all 3 plots
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailylowpermonth <- temp.dailylow %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, treatment) %>% dplyr::summarize(mean = mean(low))
mean.temp.dailylowpermonth
# calculate mean daily low (mean) per month for each plot separately
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailylowpermonth.plot <- temp.dailylow %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, plot, treatment) %>% dplyr::summarize(mean = mean(low))
mean.temp.dailylowpermonth.plot
# t test
pwc.temp.dailylowpermonth.plot <- mean.temp.dailylowpermonth.plot %>% group_by(plot) %>%
rstatix::t_test(mean ~ treatment, paired = T, detailed = T)
pwc.temp.dailylowpermonth.plot %>% adjust_pvalue(method = "BH") -> pwc.temp.dailylowpermonth.plot
#### anova ####
# one way anova with repeated measures (plot pairs/triplets)
anova.mean.temp.dailylowpermonth.plot <-  mean.temp.dailylowpermonth.plot %>% ungroup() %>%
rstatix::anova_test(mean ~ treatment, wid = plot)
rstatix::get_anova_table(anova.mean.temp.dailylowpermonth.plot)
#### LIGHT ####
#### high ####
#### three pairs ####
# pull out the high TEMP from each day, for each treatment
alldata %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(high = max(Intensity.Lux), n = n(), sd.Value = sd(Intensity.Lux)) -> light.dailyhigh
head(light.dailyhigh)
# calculate mean daily high per month
light.dailyhigh %>%
mutate(month = month(date)) %>%
group_by(month, plot, treatment) %>%
dplyr::summarize(meandailyhigh = mean(high), n = n(), sd.dailyhigh = sd(high)) -> light.dailyhighpermonth.mean
head(light.dailyhighpermonth.mean)
#
# calculate mean daily high (mean) per month for all 3 plots
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.light.dailyhighpermonth <- light.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, treatment) %>% dplyr::summarize(mean = mean(high))
mean.light.dailyhighpermonth
# calculate mean daily high (mean) per month for each plot separately
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.light.dailyhighpermonth.plot <- light.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, plot, treatment) %>% dplyr::summarize(mean = mean(high))
mean.light.dailyhighpermonth.plot
#### anova ####
# one way anova with repeated measures (plot pairs/triplets)
anova.mean.light.dailyhighpermonth.plot <-  mean.light.dailyhighpermonth.plot %>% ungroup() %>%
rstatix::anova_test(mean ~ treatment, wid = plot)
rstatix::get_anova_table(anova.mean.light.dailyhighpermonth.plot)
# ANOVA Table (type II tests)
# ANOVA Table (type II tests)
#
View(alldata)
View(alldata)
setwd("/Users/jennaekwealor/Documents/dissertation_repositories/syntrichia_field_UV/data_loggers")
source('ibutton.functions.R')
ibutton.data.feb.temp <- read.ibutton.folder("ibutton_data/field/temp/feb2019")
ibutton.data.feb.RH <- read.ibutton.folder("ibutton_data/field/RH/feb2019")
## which ones failed? you could just check the number of rows in each, and pick
## the ones which are suspiciously short, indicating that the ibutton stopped
## recording temperature.  This function automates this process to make it a bit
## more objective: it points out ones which recorded less than the median number
## of datapoints for the experiment.  It assumes that all the ibuttons were
## supposed to run for equal amounts of time
id.broken(ibutton.data.feb.temp)
id.broken(ibutton.data.feb.RH)
## get the lengths for your own use:
sapply(ibutton.data.feb.temp,nrow)
sapply(ibutton.data.feb.RH,nrow)
## correct the dates and make df
## Now that the data is checked, this function takes the list of ibuttons and
## combines them together.  It also reformats the "Date.Time" variable, into a
## format that R recognizes as a date and time.
#ibutton.df <- as.data.frame(ibutton.data)
ibutton.df.temp.feb <- na.omit(ibuttons.to.data.frame(ibutton.data.feb.temp))
head(ibutton.df.temp.feb)
summary(ibutton.df.temp.feb)
# remove row names
rownames(ibutton.df.temp.feb) <- c()
# make new 'treatment' column
ibutton.df.temp.feb$treatment <- ifelse(grepl("-UV", ibutton.df.temp.feb$ibutton), "UV.filtered", ifelse(grepl("+UV", ibutton.df.temp.feb$ibutton), "UV.transmitted", ifelse(grepl("surface", ibutton.df.temp.feb$ibutton), "Site.reference", "")))
ibutton.df.RH.feb <- na.omit(ibuttons.to.data.frame(ibutton.data.feb.RH))
head(ibutton.df.RH.feb)
summary(ibutton.df.RH.feb)
# remove row names
rownames(ibutton.df.RH.feb) <- c()
# make new 'treatment' column
ibutton.df.RH.feb$treatment <- ifelse(grepl("-UV", ibutton.df.RH.feb$ibutton), "UV.filtered", ifelse(grepl("+UV", ibutton.df.RH.feb$ibutton), "UV.transmitted", ifelse(grepl("surface", ibutton.df.RH.feb$ibutton), "Site.reference", "")))
# fix format
ibutton.df.temp.feb$Date.Time <- as.POSIXct(ibutton.df.temp.feb$Date.Time)
ibutton.df.RH.feb$Date.Time <- as.POSIXct(ibutton.df.RH.feb$Date.Time)
# add plot column
ibutton.df.temp.feb$plot <- ifelse(grepl("plot21", ibutton.df.temp.feb$ibutton), "twentyone", ifelse(grepl("plot22", ibutton.df.temp.feb$ibutton), "twentytwo", ifelse(grepl("plot23", ibutton.df.temp.feb$ibutton), "twentythree", "")))
ibutton.df.RH.feb$plot <- ifelse(grepl("plot21", ibutton.df.RH.feb$ibutton), "twentyone", ifelse(grepl("plot22", ibutton.df.RH.feb$ibutton), "twentytwo", ifelse(grepl("plot23", ibutton.df.RH.feb$ibutton), "twentythree", "")))
#### temp ####
# pull out the high TEMP from each day, for each treatment
ibutton.df.temp.feb %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(high = max(Value), n = n(), sd.Value = sd(Value)) -> ibutton.df.temp.feb.dailyhigh
head(ibutton.df.temp.feb.dailyhigh)
# find mean daily high for the whole measurement period, per plot
ibutton.df.temp.feb.dailyhigh %>%
group_by(plot, treatment) %>%
dplyr::summarize(meandailyhigh = mean(high), n = n(), sd.dailyhigh = sd(high)) -> ibutton.df.temp.feb.dailyhigh.mean
head(ibutton.df.temp.feb.dailyhigh.mean)
# one way anova with repeated measures (plot pairs/triplets)
anova.ibutton.df.temp.feb.dailyhigh <-  ibutton.df.temp.feb.dailyhigh %>% ungroup() %>%
rstatix::anova_test(high ~ treatment, wid = plot)
rstatix::get_anova_table(anova.ibutton.df.temp.feb.dailyhigh)
anova.ibutton.df.temp.feb.dailyhigh
ibutton.df.temp.feb.dailyhigh
View(ibutton.df.RH.feb)
View(ibutton.df.RH.feb)
library(tidyverse)
library(lubridate)
library(rstatix)
library(dplyr)
setwd("~/Documents/dissertation_repositories/syntrichia_field_UV/data_loggers/hobo_data/field")
### a: UV filtered ###
# load files
twentyone.a.febjune <- read.csv("Plot_21-A,_OP-3_febjune2019.csv")
twentyone.a.june <- read.csv("Plot_21-A,_OP-3_june2019.csv")
# bind the files together since dates are not overlapping
twentyone.a.fjj <- rbind(twentyone.a.febjune, twentyone.a.june)
# make new 'plot' column for paired testing
twentyone.a.fjj$plot <- rep("twentyone")
### b: UV transmitted ###
# load files
twentyone.b.febjune <- read.csv("Plot_21-B,_SUVT_febjune2019.csv")
twentyone.b.june <- read.csv("Plot_21-B,_SUVT_june2019.csv")
# bind the files together since dates are not overlapping
twentyone.b.fjj <- rbind(twentyone.b.febjune, twentyone.b.june)
# make new 'plot' column for paired testing
twentyone.b.fjj$plot <- rep("twentyone")
### a: UV filtered ###
# load files
twentytwo.a.febjune <- read.csv("Plot_22-A,_OP-3_febjune2019.csv")
# make new 'plot' column for paired testing
twentytwo.a.febjune$plot <- rep("twentytwo")
### b: UV transmitted ###
# load files
twentytwo.b.febjune <- read.csv("Plot_22-B,_SUVT_febjune2019.csv")
# make new 'plot' column for paired testing
twentytwo.b.febjune$plot <- rep("twentytwo")
# fix column name to match the others
twentytwo.b.febjune %>% dplyr::rename(Intensity.Lux = Intensity.Lux.) -> twentytwo.b.febjune
### a: UV filtered ###
# load files
twentythree.a.febjune <- read.csv("Plot_23-A,_OP-3_febjune2019.csv")
twentythree.a.june <- read.csv("Plot_23-A,_OP-3_june2019.csv")
# fix names to all match
twentythree.a.june %>% dplyr::rename(Date.Time = Date.Time.GMT.08.00) -> twentythree.a.june
# bind the files together since dates are not overlapping
twentythree.a.fjj <- rbind(twentythree.a.febjune, twentythree.a.june)
# make new 'plot' column for paired testing
twentythree.a.fjj$plot <- rep("twentythree")
### b: UV transmitted ###
# load files
twentythree.b.febjune <- read.csv("Plot_23-B,_SUVT_febjune2019.csv")
twentythree.b.june <- read.csv("Plot_23-B,_SUVT_june2019.csv")
# fix names to all match
twentythree.b.june %>% dplyr::rename(Date.Time = Date.Time..GMT.08.00) -> twentythree.b.june
twentythree.b.febjune %>% dplyr::rename(Date.Time = Date.Time..GMT.08.00) -> twentythree.b.febjune
# bind the files together since dates are not overlapping
twentythree.b.fjj <- rbind(twentythree.b.febjune, twentythree.b.june)
# make new 'plot' column for paired testing
twentythree.b.fjj$plot <- rep("twentythree")
# fix names of other columns for rbind
twentythree.b.fjj %>% dplyr::rename(Temp..C = Temp...C, Intensity.Lux = Intensity..Lux) -> twentythree.b.fjj
### combine each single treatment type from all three plots ###
uv.filtered <- rbind(twentyone.a.fjj, twentytwo.a.febjune, twentythree.a.fjj)
# make new 'treatment' column
uv.filtered$treatment <- rep("UV.filtered")
uv.transmitted <- rbind(twentyone.b.fjj, twentytwo.b.febjune, twentythree.b.fjj)
# make new 'treatment' column
uv.transmitted$treatment <- rep("UV.transmitted")
# combine all three treatments into one data frame
alldata <- rbind(uv.filtered, uv.transmitted)
alldata <- na.omit(alldata)
# want daily average high and low... need to be able to group by day
# fix format
alldata$Date.Time <- as.character(alldata$Date.Time)
alldata$Date.Time <- as.POSIXct(alldata$Date.Time, format="%Y-%m-%d %H:%M:%S")
alldata <- na.omit(alldata)
#### TEMP ####
#### high ####
# pull out the high TEMP from each day, for each treatment
alldata %>%
mutate(hour = lubridate::hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(high = max(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailyhigh
head(temp.dailyhigh)
# calculate mean daily high per month
temp.dailyhigh %>%
mutate(month = month(date)) %>%
group_by(month, plot, treatment) %>%
dplyr::summarize(meandailyhigh = mean(high), n = n(), sd.dailyhigh = sd(high)) -> temp.dailyhighpermonth.mean
head(temp.dailyhighpermonth.mean)
#
# # calculate mean daily high (mean) per month for all 3 plots
# # data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailyhighpermonth <- temp.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, treatment) %>% dplyr::summarize(mean = mean(high), n = n(), sd = sd(high))
mean.temp.dailyhighpermonth
# calculate mean daily high (mean) per month for each plot separately
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailyhighpermonth.plot <- temp.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, plot, treatment) %>% dplyr::summarize(mean = mean(high))
mean.temp.dailyhighpermonth.plot
#### anova ####
# one way anova with repeated measures (plot pairs/triplets)
anova.mean.temp.dailyhighpermonth.plot <-  mean.temp.dailyhighpermonth.plot %>% ungroup() %>%
rstatix::anova_test(mean ~ treatment, wid = plot)
rstatix::get_anova_table(anova.mean.temp.dailyhighpermonth.plot)
# pull out the low TEMP from each day, for each treatment
alldata %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(low = min(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailylow
head(temp.dailylow)
# calculate mean daily low per month
temp.dailylow %>%
mutate(month = month(date)) %>%
group_by(month, plot, treatment) %>%
dplyr::summarize(meandailylow = mean(low), n = n(), sd.dailylow = sd(low)) -> temp.dailylowpermonth.mean
head(temp.dailylowpermonth.mean)
#
# calculate mean daily low (mean) per month for all 3 plots
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailylowpermonth <- temp.dailylow %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, treatment) %>% dplyr::summarize(mean = mean(low), n = n(), sd = sd(low))
mean.temp.dailylowpermonth
# calculate mean daily low (mean) per month for each plot separately
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailylowpermonth.plot <- temp.dailylow %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, plot, treatment) %>% dplyr::summarize(mean = mean(low))
mean.temp.dailylowpermonth.plot
#### anova ####
# one way anova with repeated measures (plot pairs/triplets)
anova.mean.temp.dailylowpermonth.plot <-  mean.temp.dailylowpermonth.plot %>% ungroup() %>%
rstatix::anova_test(mean ~ treatment, wid = plot)
rstatix::get_anova_table(anova.mean.temp.dailylowpermonth.plot)
# pull out the high TEMP from each day, for each treatment
alldata %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(high = max(Intensity.Lux), n = n(), sd.Value = sd(Intensity.Lux)) -> light.dailyhigh
head(light.dailyhigh)
# calculate mean daily high per month
light.dailyhigh %>%
mutate(month = month(date)) %>%
group_by(month, plot, treatment) %>%
dplyr::summarize(meandailyhigh = mean(high), n = n(), sd.dailyhigh = sd(high)) -> light.dailyhighpermonth.mean
head(light.dailyhighpermonth.mean)
#
# calculate mean daily high (mean) per month for all 3 plots
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.light.dailyhighpermonth <- light.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, treatment) %>% dplyr::summarize(mean = mean(high))
mean.light.dailyhighpermonth
# calculate mean daily high (mean) per month for each plot separately
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.light.dailyhighpermonth.plot <- light.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, plot, treatment) %>% dplyr::summarize(mean = mean(high))
mean.light.dailyhighpermonth.plot
#### anova ####
# one way anova with repeated measures (plot pairs/triplets)
anova.mean.light.dailyhighpermonth.plot <-  mean.light.dailyhighpermonth.plot %>% ungroup() %>%
rstatix::anova_test(mean ~ treatment, wid = plot)
rstatix::get_anova_table(anova.mean.light.dailyhighpermonth.plot)
# ANOVA Table (type II tests)
# ANOVA Table (type II tests)
#
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# 1 treatment   1  28 0.954 0.337       0.033
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# 1 treatment   1  28 0.954 0.337       0.033
