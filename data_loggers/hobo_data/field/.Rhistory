install.packages("ggplot2")
# load data
# mean <- read.csv("pigments-restructured.csv")
# stddevdata <- read.csv("standard-dev-pigments.csv")
mean.normtotalpigment <- read.csv("pigments/normtotalpigment.csv")
?pairwise_wilcox_test()
library(rstatix)
library(rstatix)
?pairwise_wilcox_test()
install.packages("ggmap")
library("ggmap")
install.packages("maptools")
library("ggmap")
install.packages("maptools")
library("maptools")
install.packages("maps")
library("maps")
install.packages("BIEN")
library("BIEN")
records <- BIEN_occurrence_genus("Cardiospermum")
install.packages("BIEN")
install.packages("units")
Distribution <- read.csv("~/Desktop/Distribution1.csv")
head(Distribution)
length(Distribution)
View(Distribution)
View(Distribution)
#worldMap
mapa <- borders("world", regions = ".",  colour = "black", fill = "ivory")
#plot points on map
mp<- ggplot() + mapa + theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_line(colour = "white"), panel.grid.minor = element_blank())
mp+ geom_point(aes(color= records$scrubbed_genus, x=Longitude, y=Latitude), size =.2) + scale_color_brewer(palette="Set1")
Distribution %>% filter!(between(Longitude, -15, 180)))
Distribution %>% filter(between!(Longitude, -15, 180)))
Distribution %>% filter(between(Longitude, -15, 180)))
Distribution %>% filter(between(Longitude, -15, 180))
library("dplyr")
Distribution %>% filter(between(Longitude, -15, 180))
Distribution %>% filter!(between(Longitude, -15, 180))
Distribution %>% !filter(between(Longitude, -15, 180))
Distribution %>% !(filter(between(Longitude, -15, 180)))
Distribution %>% (filter(between(Longitude, -15, 180))
Distribution %>% (filter(between(Longitude, -15, 180))
)
Distribution %>% filter(between(Longitude, -15, 180))
Distribution %>% filter(between(!Longitude, -15, 180))
library("ggmap")
library("maptools")
library("maps")
library("BIEN")
library("dplyr")
Distribution <- read.csv("~/Desktop/Distribution1.csv")
head(Distribution)
length(Distribution)
Distribution %>% filter(between(!Longitude, -15, 180)) %>% filter(between(!Longitude, -15, 180))
Distribution %>% filter(between(!Longitude, -15, 180)) %>% filter(between(!Longitude, -15, 180)) -> filtered
View(filtered)
View(filtered)
Distribution %>% filter(between(!Longitude, -15, 180)) %>% filter(between(!Latitude, -45, 60)) -> filtered
#worldMap
mapa <- borders("world", regions = ".",  colour = "black", fill = "ivory")
#plot points on map
mp<- ggplot() + mapa + theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_line(colour = "white"), panel.grid.minor = element_blank())
mp+ geom_point(aes(color= records$scrubbed_genus, x=Longitude, y=Latitude), size =.2) + scale_color_brewer(palette="Set1")
class(Distribution)
class(Distribution$Latitude)
Distribution %>% filter(between(Longitude, -15, 180)) %>% filter(between(Latitude, -45, 60)) -> filtered
Distribution %>% filter(between(!Longitude, -15, 180)) %>% filter(between(!Latitude, -45, 60)) -> filtered
Distribution %>% ) %>% filter(between(!Latitude, -45, 60)) -> filtered
Distribution  %>% filter(between(!Latitude, -45, 60)) -> filtered
Distribution  %>% filter(between(!Latitude, -45, 60)) -> filtered
Distribution %>% filter(between(!Longitude, -15, 50)) %>% filter(between(!Latitude, -35, 35)) -> filtered
Distribution %>%  filter(between(!Latitude, -35, 35)) -> filtered
Distribution %>%  filter(between(Latitude, -35, 35)) -> filtered
Distribution %>%  !filter(between(Latitude, -35, 35)) -> filtered
Distribution %>%  filter(!between(Latitude, -35, 35)) -> filtered
Distribution %>%  filter(!between(Latitude, -35, 35)) -> filtered
Distribution %>% filter(!between(Longitude, -15, 50)) %>% filter(!between(Latitude, -35, 35)) -> filtered
Distribution %>% filter(!between(Longitude, -15, 180)) %>% filter(!between(Latitude, -45, 60)) -> filtered
Distribution %>% filter(!between(Longitude, -15, 50)) %>% filter(!between(Latitude, -35, 35)) -> filtered
library(dplyr)
setwd("~/Documents/dissertation_repositories/syntrichia_field_UV/data_loggers/hobo_data/field")
### a: UV filtered ###
# load files
twentyone.a.febjune <- read.csv("Plot_21-A,_OP-3_febjune2019.csv")
twentyone.a.june <- read.csv("Plot_21-A,_OP-3_june2019.csv")
# bind the files together since dates are not overlapping
twentyone.a.fjj <- rbind(twentyone.a.febjune, twentyone.a.june)
# make new 'plot' column for paired testing
twentyone.a.fjj$plot <- rep("twentyone")
### b: UV transmitted ###
# load files
twentyone.b.febjune <- read.csv("Plot_21-B,_SUVT_febjune2019.csv")
twentyone.b.june <- read.csv("Plot_21-B,_SUVT_june2019.csv")
# bind the files together since dates are not overlapping
twentyone.b.fjj <- rbind(twentyone.b.febjune, twentyone.b.june)
# make new 'plot' column for paired testing
twentyone.b.fjj$plot <- rep("twentyone")
### a: UV filtered ###
# load files
twentytwo.a.febjune <- read.csv("Plot_22-A,_OP-3_febjune2019.csv")
# make new 'plot' column for paired testing
twentytwo.a.febjune$plot <- rep("twentytwo")
### b: UV transmitted ###
# load files
twentytwo.b.febjune <- read.csv("Plot_22-B,_SUVT_febjune2019.csv")
# make new 'plot' column for paired testing
twentytwo.b.febjune$plot <- rep("twentytwo")
# fix column name to match the others
twentytwo.b.febjune %>% rename(Intensity.Lux = Intensity.Lux.) -> twentytwo.b.febjune
### a: UV filtered ###
# load files
twentythree.a.febjune <- read.csv("Plot_23-A,_OP-3_febjune2019.csv")
twentythree.a.june <- read.csv("Plot_23-A,_OP-3_june2019.csv")
# fix names to all match
twentythree.a.june %>% rename(Date.Time = Date.Time.GMT.08.00) -> twentythree.a.june
# bind the files together since dates are not overlapping
twentythree.a.fjj <- rbind(twentythree.a.febjune, twentythree.a.june)
# make new 'plot' column for paired testing
twentythree.a.fjj$plot <- rep("twentythree")
### b: UV transmitted ###
# load files
twentythree.b.febjune <- read.csv("Plot_23-B,_SUVT_febjune2019.csv")
twentythree.b.june <- read.csv("Plot_23-B,_SUVT_june2019.csv")
# fix names to all match
twentythree.b.june %>% rename(Date.Time = Date.Time..GMT.08.00) -> twentythree.b.june
twentythree.b.febjune %>% rename(Date.Time = Date.Time..GMT.08.00) -> twentythree.b.febjune
# bind the files together since dates are not overlapping
twentythree.b.fjj <- rbind(twentythree.b.febjune, twentythree.b.june)
# make new 'plot' column for paired testing
twentythree.b.fjj$plot <- rep("twentythree")
# fix names of other columns for rbind
twentythree.b.fjj %>% rename(Temp..C = Temp...C, Intensity.Lux = Intensity..Lux) -> twentythree.b.fjj
### c: site reference ###
# load files
twentythree.c.june <- read.csv("Plot_23-C,_OP-3_june2019.csv")
# make new 'plot' column for paired testing
twentythree.c.june$plot <- rep("twentythree")
# fix column header
twentythree.c.june %>% rename(Temp..C = Temp...C, Intensity.Lux = Intensity..Lux, Date.Time = Date.Time..GMT.08.00) -> twentythree.c.june
### combine all the june files for a single reduced data set that has all three treatments
# fix name for merge
twentythree.b.june %>% rename(Temp..C = Temp...C, Intensity.Lux = Intensity..Lux) -> twentythree.b.june
twentythree.c.june %>% select(Date.Time,Temp..C, Intensity.Lux) -> twentythree.c.june.select
# add treatment columns
twentythree.a.june$treatment <- rep("UV.filtered")
twentythree.b.june$treatment <- rep("UV.transmitted")
twentythree.c.june.select$treatment <- rep("Site.reference")
twentythree.all.june <- rbind(twentythree.a.june, twentythree.b.june, twentythree.c.june.select)
twentythree.all.june <- na.omit(twentythree.all.june)
### combine each single treatment type from all three plots ###
uv.filtered <- rbind(twentyone.a.fjj, twentytwo.a.febjune, twentythree.a.fjj)
# make new 'treatment' column
uv.filtered$treatment <- rep("UV.filtered")
uv.transmitted <- rbind(twentyone.b.fjj, twentytwo.b.febjune, twentythree.b.fjj)
# make new 'treatment' column
uv.transmitted$treatment <- rep("UV.transmitted")
# only a single c, site reference, from twentythree
# make new treatment column
site.reference <- twentythree.c.june
site.reference$treatment <- rep("Site.reference")
# combine all three treatments into one data frame
alldata <- rbind(uv.filtered, uv.transmitted, site.reference)
alldata <- na.omit(alldata)
# want daily average high and low... need to be able to group by day
# fix format
alldata$Date.Time <- as.character(alldata$Date.Time)
alldata$Date.Time <- as.POSIXct(alldata$Date.Time, format="%Y-%m-%d %H:%M:%S")
alldata <- na.omit(alldata)
#### temp ####
#### high ####
# pull out the high TEMP from each day, for each treatment
alldata %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(high = max(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailyhigh
head(temp.dailyhigh)
#### temp ####
#### high ####
# pull out the high TEMP from each day, for each treatment
alldata %>%
mutate(hour = lubridate::hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(high = max(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailyhigh
library(lubridate)
#### temp ####
#### high ####
# pull out the high TEMP from each day, for each treatment
alldata %>%
mutate(hour = lubridate::hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(high = max(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailyhigh
head(temp.dailyhigh)
# calculate mean daily high per month
temp.dailyhigh %>%
mutate(month = month(date)) %>%
group_by(month, plot, treatment) %>%
dplyr::summarize(meandailyhigh = mean(high), n = n(), sd.dailyhigh = sd(high)) -> temp.dailyhighpermonth.mean
head(temp.dailyhighpermonth.mean)
#
# # calculate mean daily high (mean) per month for all 3 plots
# # data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailyhighpermonth <- temp.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, treatment) %>% dplyr::summarize(mean = mean(high))
mean.temp.dailyhighpermonth
# calculate mean daily high (mean) per month for each plot separately
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailyhighpermonth.plot <- temp.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, plot, treatment) %>% dplyr::summarize(mean = mean(high))
mean.temp.dailyhighpermonth.plot
# one way anova with repeated measures (plot pairs/triplets)
anova.mean.temp.dailyhighpermonth.plot <-  mean.temp.dailyhighpermonth.plot %>% ungroup() %>%
rstatix::anova_test(mean ~ treatment, wid = plot)
rstatix::get_anova_table(anova.mean.temp.dailyhighpermonth.plot)
### including site reference ###
# next want to do anova of just dates that have all site reference
twentythree.all.june %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, treatment) %>%
dplyr::summarize(high = max(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailyhigh.all.june
head(temp.dailyhigh.all.june)
anova.temp.dailyhigh.all.june <-  temp.dailyhigh.all.june %>% ungroup() %>%
rstatix::anova_test(high ~ treatment, wid = date)
rstatix::get_anova_table(anova.mean.temp.dailyhighpermonth.plot)
#### low ####
# pull out the low TEMP from each day, for each treatment
alldata %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(low = min(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailylow
head(temp.dailylow)
# calculate mean daily low per month
temp.dailylow %>%
mutate(month = month(date)) %>%
group_by(month, plot, treatment) %>%
dplyr::summarize(meandailylow = mean(low), n = n(), sd.dailylow = sd(low)) -> temp.dailylowpermonth.mean
head(temp.dailylowpermonth.mean)
#
# calculate mean daily low (mean) per month for all 3 plots
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailylowpermonth <- temp.dailylow %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, treatment) %>% dplyr::summarize(mean = mean(low))
mean.temp.dailylowpermonth
# calculate mean daily low (mean) per month for each plot separately
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.temp.dailylowpermonth.plot <- temp.dailylow %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, plot, treatment) %>% dplyr::summarize(mean = mean(low))
mean.temp.dailylowpermonth.plot
# t test
pwc.temp.dailylowpermonth.plot <- mean.temp.dailylowpermonth.plot %>% group_by(plot) %>%
rstatix::t_test(mean ~ treatment, paired = T, detailed = T)
pwc.temp.dailylowpermonth.plot %>% adjust_pvalue(method = "BH") -> pwc.temp.dailylowpermonth.plot
# one way anova with repeated measures (plot pairs/triplets)
anova.mean.temp.dailylowpermonth.plot <-  mean.temp.dailylowpermonth.plot %>% ungroup() %>%
rstatix::anova_test(mean ~ treatment, wid = plot)
rstatix::get_anova_table(anova.mean.temp.dailylowpermonth.plot)
### including site reference ###
# next want to do anova of just dates that have all site reference
twentythree.all.june %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, treatment) %>%
dplyr::summarize(low = min(Temp..C), n = n(), sd.Value = sd(Temp..C)) -> temp.dailylow.all.june
head(temp.dailylow.all.june)
anova.temp.dailylow.all.june <-  temp.dailylow.all.june %>% ungroup() %>%
rstatix::anova_test(low ~ treatment, wid = date)
rstatix::get_anova_table(anova.mean.temp.dailylowpermonth.plot)
#### light ####
#### high ####
# pull out the high TEMP from each day, for each treatment
alldata %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, plot, treatment) %>%
dplyr::summarize(high = max(Intensity.Lux), n = n(), sd.Value = sd(Intensity.Lux)) -> light.dailyhigh
head(light.dailyhigh)
# calculate mean daily high per month
light.dailyhigh %>%
mutate(month = month(date)) %>%
group_by(month, plot, treatment) %>%
dplyr::summarize(meandailyhigh = mean(high), n = n(), sd.dailyhigh = sd(high)) -> light.dailyhighpermonth.mean
head(light.dailyhighpermonth.mean)
#
# calculate mean daily high (mean) per month for all 3 plots
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.light.dailyhighpermonth <- light.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, treatment) %>% dplyr::summarize(mean = mean(high))
mean.light.dailyhighpermonth
# calculate mean daily high (mean) per month for each plot separately
# data for Site.reference is only available for 2019-06-06, 2019-06-07, and 2019 06-08
mean.light.dailyhighpermonth.plot <- light.dailyhigh %>% dplyr::filter(., treatment != "Site.reference") %>%
mutate(month = month(date)) %>% group_by(month, plot, treatment) %>% dplyr::summarize(mean = mean(high))
mean.light.dailyhighpermonth.plot
# one way anova with repeated measures (plot pairs/triplets)
anova.mean.light.dailyhighpermonth.plot <-  mean.light.dailyhighpermonth.plot %>% ungroup() %>%
rstatix::anova_test(mean ~ treatment, wid = plot)
rstatix::get_anova_table(anova.mean.light.dailyhighpermonth.plot)
### including site reference ###
# next want to do anova of just dates that have all site reference
twentythree.all.june %>%
mutate(hour = hour(Date.Time)) %>%
mutate(date = date(Date.Time)) %>%
group_by(date, treatment) %>%
dplyr::summarize(high = max(Intensity.Lux), n = n(), sd.Value = sd(Intensity.Lux)) -> light.dailyhigh.all.june
head(light.dailyhigh.all.june)
anova.light.dailyhigh.all.june <-  light.dailyhigh.all.june %>% ungroup() %>%
rstatix::anova_test(high ~ treatment, wid = date)
rstatix::get_anova_table(anova.mean.light.dailyhighpermonth.plot)
# ANOVA Table (type II tests)
# ANOVA Table (type II tests)
#
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# 1 treatment   1  28 0.954 0.337       0.033
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# 1 treatment   1  28 0.954 0.337       0.033
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# 1 treatment   1  28 0.954 0.337       0.033
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# 1 treatment   1  28 0.954 0.337       0.033
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# 1 treatment   1  28 0.954 0.337       0.033
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# 1 treatment   1  28 0.954 0.337       0.033
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# 1 treatment   1  28 0.954 0.337       0.033
# ANOVA Table (type II tests)
#
# Effect DFn DFd     F     p p<.05   ges
# 1 treatment   1  28 0.954 0.337       0.033
